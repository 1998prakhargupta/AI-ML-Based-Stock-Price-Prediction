# =============================================================================
# Enterprise Stock Price Predictor - Unified Kubernetes Deployment
# =============================================================================
# Production-ready Kubernetes manifests for complete ML system deployment
# Includes API, ML training, inference, database, monitoring, and security

---
# ================================
# Namespace
# ================================
apiVersion: v1
kind: Namespace
metadata:
  name: price-predictor
  labels:
    app.kubernetes.io/name: price-predictor
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: namespace

---
# ================================
# ConfigMaps
# ================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: price-predictor-config
  namespace: price-predictor
data:
  # Application Configuration
  ENVIRONMENT: "production"
  LOG_LEVEL: "INFO"
  PYTHONPATH: "/app"
  
  # Database Configuration
  POSTGRES_DB: "price_predictor"
  POSTGRES_USER: "postgres"
  
  # Redis Configuration
  REDIS_HOST: "redis-service"
  REDIS_PORT: "6379"
  
  # ML Configuration
  ML_MODEL_PATH: "/app/models"
  DATA_PATH: "/app/data"
  ML_TRAINING_CONFIG: "/app/config/ensemble-config.yaml"
  
  # API Configuration
  API_HOST: "0.0.0.0"
  API_PORT: "8000"
  
  # Monitoring Configuration
  PROMETHEUS_URL: "http://prometheus-service:9090"
  GRAFANA_URL: "http://grafana-service:3000"

---
# ================================
# Secrets
# ================================
apiVersion: v1
kind: Secret
metadata:
  name: price-predictor-secrets
  namespace: price-predictor
type: Opaque
data:
  # Database credentials (base64 encoded)
  POSTGRES_PASSWORD: cG9zdGdyZXM=  # 'postgres' - CHANGE IN PRODUCTION
  DATABASE_URL: cG9zdGdyZXNxbDovL3Bvc3RncmVzOnBvc3RncmVzQHBvc3RncmVzLXNlcnZpY2U6NTQzMi9wcmljZV9wcmVkaWN0b3I=
  
  # Redis credentials
  REDIS_PASSWORD: cmVkaXNfcGFzc3dvcmQ=  # 'redis_password' - CHANGE IN PRODUCTION
  
  # API credentials
  API_SECRET_KEY: c3VwZXJfc2VjcmV0X2tleV9jaGFuZ2VfaW5fcHJvZHVjdGlvbg==
  
  # External API keys (add your actual keys)
  BREEZE_API_KEY: ""
  BREEZE_API_SECRET: ""
  ALPHA_VANTAGE_API_KEY: ""

---
# ================================
# Persistent Volume Claims
# ================================
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: price-predictor
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: fast-ssd

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: price-predictor
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: fast-ssd

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: models-pvc
  namespace: price-predictor
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 50Gi
  storageClassName: shared-storage

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: data-pvc
  namespace: price-predictor
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 100Gi
  storageClassName: shared-storage

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: logs-pvc
  namespace: price-predictor
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 20Gi
  storageClassName: standard

---
# ================================
# PostgreSQL Database
# ================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-deployment
  namespace: price-predictor
  labels:
    app: postgres
    version: v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
        version: v1
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: price-predictor-config
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: price-predictor-config
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: price-predictor-secrets
              key: POSTGRES_PASSWORD
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "2Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "1000m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: price-predictor
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP

---
# ================================
# Redis Cache
# ================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-deployment
  namespace: price-predictor
  labels:
    app: redis
    version: v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
        version: v1
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        command:
        - redis-server
        - --requirepass
        - $(REDIS_PASSWORD)
        - --maxmemory
        - 2gb
        - --maxmemory-policy
        - allkeys-lru
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: price-predictor-secrets
              key: REDIS_PASSWORD
        volumeMounts:
        - name: redis-storage
          mountPath: /data
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: redis-storage
        persistentVolumeClaim:
          claimName: redis-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: price-predictor
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP

---
# ================================
# API Deployment
# ================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-deployment
  namespace: price-predictor
  labels:
    app: api
    version: v1
spec:
  replicas: 3
  selector:
    matchLabels:
      app: api
  template:
    metadata:
      labels:
        app: api
        version: v1
    spec:
      containers:
      - name: api
        image: price-predictor:production
        ports:
        - containerPort: 8000
        envFrom:
        - configMapRef:
            name: price-predictor-config
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: price-predictor-secrets
              key: DATABASE_URL
        - name: API_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: price-predictor-secrets
              key: API_SECRET_KEY
        volumeMounts:
        - name: models-storage
          mountPath: /app/models
        - name: data-storage
          mountPath: /app/data
        - name: logs-storage
          mountPath: /app/logs
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: models-storage
        persistentVolumeClaim:
          claimName: models-pvc
      - name: data-storage
        persistentVolumeClaim:
          claimName: data-pvc
      - name: logs-storage
        persistentVolumeClaim:
          claimName: logs-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: api-service
  namespace: price-predictor
spec:
  selector:
    app: api
  ports:
  - port: 8000
    targetPort: 8000
  type: ClusterIP

---
# ================================
# Inference Deployment
# ================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: inference-deployment
  namespace: price-predictor
  labels:
    app: inference
    version: v1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: inference
  template:
    metadata:
      labels:
        app: inference
        version: v1
    spec:
      containers:
      - name: inference
        image: price-predictor:inference
        ports:
        - containerPort: 8000
        envFrom:
        - configMapRef:
            name: price-predictor-config
        env:
        - name: REDIS_URL
          value: "redis://redis-service:6379/1"
        volumeMounts:
        - name: models-storage
          mountPath: /app/models
          readOnly: true
        - name: logs-storage
          mountPath: /app/logs
        resources:
          requests:
            memory: "4Gi"
            cpu: "2000m"
          limits:
            memory: "8Gi"
            cpu: "4000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5

---
apiVersion: v1
kind: Service
metadata:
  name: inference-service
  namespace: price-predictor
spec:
  selector:
    app: inference
  ports:
  - port: 8000
    targetPort: 8000
  type: ClusterIP

---
# ================================
# ML Training Job
# ================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ml-training-deployment
  namespace: price-predictor
  labels:
    app: ml-training
    version: v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ml-training
  template:
    metadata:
      labels:
        app: ml-training
        version: v1
    spec:
      containers:
      - name: ml-training
        image: price-predictor:ml-training
        envFrom:
        - configMapRef:
            name: price-predictor-config
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: price-predictor-secrets
              key: DATABASE_URL
        - name: CUDA_VISIBLE_DEVICES
          value: "0"
        volumeMounts:
        - name: models-storage
          mountPath: /app/models
        - name: data-storage
          mountPath: /app/data
        - name: logs-storage
          mountPath: /app/logs
        resources:
          requests:
            memory: "8Gi"
            cpu: "4000m"
            nvidia.com/gpu: 1
          limits:
            memory: "16Gi"
            cpu: "8000m"
            nvidia.com/gpu: 1
      volumes:
      - name: models-storage
        persistentVolumeClaim:
          claimName: models-pvc
      - name: data-storage
        persistentVolumeClaim:
          claimName: data-pvc
      - name: logs-storage
        persistentVolumeClaim:
          claimName: logs-pvc

---
# ================================
# Data Pipeline CronJob
# ================================
apiVersion: batch/v1
kind: CronJob
metadata:
  name: data-pipeline-cronjob
  namespace: price-predictor
spec:
  schedule: "0 */6 * * *"  # Every 6 hours
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          containers:
          - name: data-pipeline
            image: price-predictor:data-pipeline
            envFrom:
            - configMapRef:
                name: price-predictor-config
            env:
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: price-predictor-secrets
                  key: DATABASE_URL
            volumeMounts:
            - name: data-storage
              mountPath: /app/data
            - name: logs-storage
              mountPath: /app/logs
            resources:
              requests:
                memory: "2Gi"
                cpu: "1000m"
              limits:
                memory: "4Gi"
                cpu: "2000m"
          volumes:
          - name: data-storage
            persistentVolumeClaim:
              claimName: data-pvc
          - name: logs-storage
            persistentVolumeClaim:
              claimName: logs-pvc

---
# ================================
# Horizontal Pod Autoscaler
# ================================
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: api-hpa
  namespace: price-predictor
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: api-deployment
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: inference-hpa
  namespace: price-predictor
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: inference-deployment
  minReplicas: 1
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 75

---
# ================================
# Ingress
# ================================
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: price-predictor-ingress
  namespace: price-predictor
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  tls:
  - hosts:
    - api.pricepredictor.com
    - inference.pricepredictor.com
    secretName: price-predictor-tls
  rules:
  - host: api.pricepredictor.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: api-service
            port:
              number: 8000
  - host: inference.pricepredictor.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: inference-service
            port:
              number: 8000

---
# ================================
# Network Policies
# ================================
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: price-predictor-network-policy
  namespace: price-predictor
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: price-predictor
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: price-predictor
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80

---
# ================================
# Monitoring - Prometheus
# ================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus-deployment
  namespace: price-predictor
  labels:
    app: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus:latest
        ports:
        - containerPort: 9090
        args:
        - '--config.file=/etc/prometheus/prometheus.yml'
        - '--storage.tsdb.path=/prometheus'
        - '--web.console.libraries=/etc/prometheus/console_libraries'
        - '--web.console.templates=/etc/prometheus/consoles'
        - '--storage.tsdb.retention.time=200h'
        - '--web.enable-lifecycle'
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus
        - name: prometheus-storage
          mountPath: /prometheus
        resources:
          requests:
            memory: "2Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "1000m"
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
      - name: prometheus-storage
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
  namespace: price-predictor
spec:
  selector:
    app: prometheus
  ports:
  - port: 9090
    targetPort: 9090
  type: ClusterIP

---
# ================================
# Monitoring - Grafana
# ================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana-deployment
  namespace: price-predictor
  labels:
    app: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:latest
        ports:
        - containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: "admin"  # Change in production
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
      volumes:
      - name: grafana-storage
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
  namespace: price-predictor
spec:
  selector:
    app: grafana
  ports:
  - port: 3000
    targetPort: 3000
  type: ClusterIP

---
# ================================
# Service Monitor for Prometheus
# ================================
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: price-predictor-monitor
  namespace: price-predictor
  labels:
    app: price-predictor
spec:
  selector:
    matchLabels:
      app: api
  endpoints:
  - port: http
    interval: 30s
    path: /metrics
