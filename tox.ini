[tox]
envlist = py36,py37,py38,py39,py310,py311,flake8,mypy,docs,security
skipsdist = False

[gh-actions]
python =
    3.6: py36
    3.7: py37  
    3.8: py38
    3.9: py39
    3.10: py310
    3.11: py311

[testenv]
# Dependencies
deps = 
    -r{toxinidir}/requirements.txt
    -r{toxinidir}/requirements-dev.txt

# Environment variables
setenv =
    PYTHONPATH = {toxinidir}
    COVERAGE_FILE = {envtmpdir}/.coverage

# Test commands
commands = 
    pytest {posargs:tests} --cov=src --cov-report=term-missing --cov-report=xml --cov-report=html

# Change directory for testing
changedir = {toxinidir}

[testenv:flake8]
deps = 
    flake8
    flake8-docstrings
    flake8-import-order
    flake8-builtins
    flake8-comprehensions
    flake8-simplify
commands = 
    flake8 src tests

[testenv:mypy]
deps = 
    mypy
    types-requests
    types-PyYAML
    types-python-dateutil
commands = 
    mypy src

[testenv:black]
deps = black
commands = 
    black --check src tests

[testenv:isort]
deps = isort
commands = 
    isort --check-only src tests

[testenv:pylint]
deps = 
    pylint
    -r{toxinidir}/requirements.txt
commands = 
    pylint src

[testenv:bandit]
deps = bandit[toml]
commands = 
    bandit -r src -f json -o {toxinidir}/reports/bandit-report.json

[testenv:safety]
deps = safety
commands = 
    safety check --json --output {toxinidir}/reports/safety-report.json

[testenv:security]
deps = 
    bandit[toml]
    safety
commands = 
    bandit -r src
    safety check

[testenv:docs]
deps = 
    sphinx
    sphinx-rtd-theme
    sphinx-autodoc-typehints
    myst-parser
changedir = docs
commands = 
    sphinx-build -W -b html -d {envtmpdir}/doctrees . {envtmpdir}/html

[testenv:docs-live]
deps = 
    sphinx
    sphinx-rtd-theme
    sphinx-autodoc-typehints
    myst-parser
    sphinx-autobuild
changedir = docs
commands = 
    sphinx-autobuild . {envtmpdir}/html

[testenv:coverage]
deps = 
    coverage[toml]
    -r{toxinidir}/requirements-dev.txt
commands = 
    coverage run -m pytest tests
    coverage report
    coverage html
    coverage xml

[testenv:integration]
deps = 
    -r{toxinidir}/requirements.txt
    -r{toxinidir}/requirements-dev.txt
setenv =
    {[testenv]setenv}
    INTEGRATION_TESTS = 1
commands = 
    pytest tests/integration {posargs} --cov=src

[testenv:unit]
deps = 
    -r{toxinidir}/requirements.txt
    -r{toxinidir}/requirements-dev.txt
commands = 
    pytest tests/unit {posargs} --cov=src

[testenv:performance]
deps = 
    -r{toxinidir}/requirements.txt
    -r{toxinidir}/requirements-dev.txt
    pytest-benchmark
commands = 
    pytest tests/performance {posargs}

[testenv:compliance]
deps = 
    -r{toxinidir}/requirements.txt
    -r{toxinidir}/requirements-dev.txt
setenv =
    {[testenv]setenv}
    API_COMPLIANCE_MODE = 1
commands = 
    pytest tests/compliance {posargs}

[testenv:load]
deps = 
    locust
    -r{toxinidir}/requirements.txt
commands = 
    locust -f tests/load/locustfile.py --headless -u 10 -r 2 -t 30s

[testenv:clean]
deps = 
skip_install = true
commands = 
    python -c "import shutil; import os; [shutil.rmtree(p, ignore_errors=True) for p in ['build', 'dist', 'src/*.egg-info', '.coverage', 'htmlcov', '.pytest_cache', '.mypy_cache', '__pycache__']]"

[testenv:build]
deps = 
    build
    twine
commands = 
    python -m build
    twine check dist/*

[testenv:release]
deps = 
    build
    twine
passenv = 
    TWINE_USERNAME
    TWINE_PASSWORD
    TWINE_REPOSITORY_URL
commands = 
    python -m build
    twine upload dist/*

[testenv:format]
deps = 
    black
    isort
commands = 
    black src tests
    isort src tests

[testenv:lint]
deps = 
    flake8
    pylint
    mypy
    bandit[toml]
    -r{toxinidir}/requirements.txt
commands = 
    flake8 src tests
    pylint src
    mypy src
    bandit -r src

[testenv:all-checks]
deps = 
    -r{toxinidir}/requirements.txt
    -r{toxinidir}/requirements-dev.txt
commands = 
    pytest tests --cov=src
    flake8 src tests
    pylint src
    mypy src
    bandit -r src
    safety check

# ML-specific testing environments
[testenv:ml-tests]
deps = 
    -r{toxinidir}/requirements.txt
    -r{toxinidir}/requirements-dev.txt
    pytest-sklearn
setenv =
    {[testenv]setenv}
    ML_TESTING = 1
commands = 
    pytest tests/models {posargs} --cov=src/models

[testenv:api-tests]
deps = 
    -r{toxinidir}/requirements.txt
    -r{toxinidir}/requirements-dev.txt
    responses
    aioresponses
setenv =
    {[testenv]setenv}
    API_TESTING = 1
commands = 
    pytest tests/api {posargs} --cov=src/api

[testenv:data-tests]
deps = 
    -r{toxinidir}/requirements.txt
    -r{toxinidir}/requirements-dev.txt
setenv =
    {[testenv]setenv}
    DATA_TESTING = 1
commands = 
    pytest tests/data {posargs} --cov=src/data

# Financial compliance testing
[testenv:financial-compliance]
deps = 
    -r{toxinidir}/requirements.txt
    -r{toxinidir}/requirements-dev.txt
setenv =
    {[testenv]setenv}
    FINANCIAL_COMPLIANCE_MODE = 1
    STRICT_VALIDATION = 1
commands = 
    pytest tests/compliance/financial {posargs}

# Transaction cost testing
[testenv:transaction-costs]
deps = 
    -r{toxinidir}/requirements.txt
    -r{toxinidir}/requirements-dev.txt
setenv =
    {[testenv]setenv}
    TRANSACTION_COST_TESTING = 1
commands = 
    pytest tests/transaction_costs {posargs} --cov=src/transaction_costs

# Environment for testing with minimal dependencies
[testenv:minimal]
deps = 
    pytest
    numpy
    pandas
commands = 
    pytest tests/unit/core {posargs}

# Docker testing environment
[testenv:docker]
whitelist_externals = docker
deps = 
commands = 
    docker build -t price-predictor-test .
    docker run --rm price-predictor-test pytest

# Parallel testing
[testenv:parallel]
deps = 
    -r{toxinidir}/requirements.txt
    -r{toxinidir}/requirements-dev.txt
    pytest-xdist
commands = 
    pytest -n auto {posargs} --cov=src

# Memory profiling
[testenv:memory]
deps = 
    -r{toxinidir}/requirements.txt
    -r{toxinidir}/requirements-dev.txt
    memory-profiler
    psutil
commands = 
    python -m memory_profiler tests/performance/memory_test.py

# Code quality metrics
[testenv:metrics]
deps = 
    radon
    xenon
commands = 
    radon cc src --average
    radon mi src
    xenon --max-absolute B --max-modules A --max-average A src

# Documentation building with all formats
[testenv:docs-all]
deps = 
    sphinx
    sphinx-rtd-theme
    sphinx-autodoc-typehints
    myst-parser
changedir = docs
commands = 
    sphinx-build -b html . {envtmpdir}/html
    sphinx-build -b latex . {envtmpdir}/latex
    sphinx-build -b epub . {envtmpdir}/epub

# Update dependencies
[testenv:deps-update]
deps = 
    pip-tools
    pur
commands = 
    pur -r requirements.txt
    pur -r requirements-dev.txt

# Configuration
[flake8]
max-line-length = 88
extend-ignore = E203, W503
exclude = 
    .git,
    __pycache__,
    build,
    dist,
    *.egg-info,
    .venv,
    .tox

[coverage:run]
source = src
omit = 
    */tests/*
    */test_*
    */__init__.py
    */conftest.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING:

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml
