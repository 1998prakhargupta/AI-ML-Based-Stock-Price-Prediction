# Docker Compose for Price Predictor Application
# Provides complete development and production environment setup

version: '3.8'

# ===============================
# Services Definition
# ===============================
services:
  
  # ===== Main Application =====
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +"%Y-%m-%dT%H:%M:%SZ")}
        VERSION: ${VERSION:-latest}
        VCS_REF: ${VCS_REF:-$(git rev-parse HEAD)}
    container_name: price-predictor-app
    restart: unless-stopped
    environment:
      - APP_ENV=${APP_ENV:-production}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - PYTHONPATH=/app
      # API Keys (loaded from .env)
      - BREEZE_API_KEY=${BREEZE_API_KEY}
      - BREEZE_SECRET=${BREEZE_SECRET}
      - ZERODHA_API_KEY=${ZERODHA_API_KEY}
      - ZERODHA_SECRET=${ZERODHA_SECRET}
      # Database
      - DATABASE_URL=${DATABASE_URL:-sqlite:///app/data/app.db}
      # Redis
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./configs:/app/configs:ro
    ports:
      - "${APP_PORT:-8000}:8000"
    depends_on:
      - redis
      - db
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ===== API Service =====
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: api
    container_name: price-predictor-api
    restart: unless-stopped
    environment:
      - APP_ENV=${APP_ENV:-production}
      - API_HOST=${API_HOST:-0.0.0.0}
      - API_PORT=${API_PORT:-8001}
      - REDIS_URL=redis://redis:6379/1
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:password@db:5432/price_predictor}
    volumes:
      - ./data:/app/data:ro
      - ./configs:/app/configs:ro
    ports:
      - "${API_PORT:-8001}:8001"
    depends_on:
      - redis
      - db
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 15s
      timeout: 5s
      retries: 3

  # ===== Database (PostgreSQL) =====
  db:
    image: postgres:15-alpine
    container_name: price-predictor-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-price_predictor}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-price_predictor}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ===== Redis (Caching & Task Queue) =====
  redis:
    image: redis:7-alpine
    container_name: price-predictor-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
      - ./configs/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # ===== Celery Worker =====
  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: price-predictor-worker
    restart: unless-stopped
    command: celery -A src.tasks.celery worker --loglevel=info --concurrency=4
    environment:
      - APP_ENV=${APP_ENV:-production}
      - CELERY_BROKER_URL=redis://redis:6379/2
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:password@db:5432/price_predictor}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./configs:/app/configs:ro
    depends_on:
      - redis
      - db
    networks:
      - app-network

  # ===== Celery Beat (Scheduler) =====
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: price-predictor-scheduler
    restart: unless-stopped
    command: celery -A src.tasks.celery beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    environment:
      - APP_ENV=${APP_ENV:-production}
      - CELERY_BROKER_URL=redis://redis:6379/2
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:password@db:5432/price_predictor}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./configs:/app/configs:ro
    depends_on:
      - redis
      - db
      - worker
    networks:
      - app-network

  # ===== Jupyter Notebook =====
  jupyter:
    build:
      context: .
      dockerfile: Dockerfile
      target: jupyter
    container_name: price-predictor-jupyter
    restart: unless-stopped
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=${JUPYTER_TOKEN:-}
      - JUPYTER_PASSWORD=${JUPYTER_PASSWORD:-}
    volumes:
      - ./notebooks:/app/notebooks
      - ./data:/app/data
      - ./src:/app/src:ro
    ports:
      - "${JUPYTER_PORT:-8888}:8888"
    networks:
      - app-network

  # ===== Monitoring - Prometheus =====
  prometheus:
    image: prom/prometheus:latest
    container_name: price-predictor-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - app-network

  # ===== Monitoring - Grafana =====
  grafana:
    image: grafana/grafana:latest
    container_name: price-predictor-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./configs/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    depends_on:
      - prometheus
    networks:
      - app-network

  # ===== Reverse Proxy - Nginx =====
  nginx:
    image: nginx:alpine
    container_name: price-predictor-nginx
    restart: unless-stopped
    volumes:
      - ./configs/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./configs/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./static:/var/www/static:ro
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    depends_on:
      - app
      - api
    networks:
      - app-network

  # ===== ElasticSearch (Logging) =====
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: price-predictor-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "${ELASTICSEARCH_PORT:-9200}:9200"
    networks:
      - app-network

  # ===== Kibana (Log Visualization) =====
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: price-predictor-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "${KIBANA_PORT:-5601}:5601"
    depends_on:
      - elasticsearch
    networks:
      - app-network

  # ===== Logstash (Log Processing) =====
  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: price-predictor-logstash
    restart: unless-stopped
    volumes:
      - ./configs/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./logs:/var/log/app:ro
    depends_on:
      - elasticsearch
    networks:
      - app-network

# ===============================
# Development Override
# ===============================
  # Development app with hot reload
  app-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: price-predictor-app-dev
    restart: unless-stopped
    environment:
      - APP_ENV=development
      - LOG_LEVEL=DEBUG
      - PYTHONPATH=/app
      - FLASK_ENV=development
      - WATCHDOG_ENABLED=true
    volumes:
      - .:/app
      - ./data:/app/data
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      - redis
      - db
    networks:
      - app-network
    profiles:
      - dev

  # ===== Testing Service =====
  test:
    build:
      context: .
      dockerfile: Dockerfile
      target: testing
    container_name: price-predictor-test
    environment:
      - APP_ENV=testing
      - DATABASE_URL=postgresql://postgres:password@db-test:5432/price_predictor_test
      - REDIS_URL=redis://redis-test:6379/0
    volumes:
      - .:/app
      - ./test-reports:/app/test-reports
    depends_on:
      - db-test
      - redis-test
    networks:
      - test-network
    profiles:
      - test

  # Test Database
  db-test:
    image: postgres:15-alpine
    container_name: price-predictor-db-test
    environment:
      - POSTGRES_DB=price_predictor_test
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - test_postgres_data:/var/lib/postgresql/data
    networks:
      - test-network
    profiles:
      - test

  # Test Redis
  redis-test:
    image: redis:7-alpine
    container_name: price-predictor-redis-test
    volumes:
      - test_redis_data:/data
    networks:
      - test-network
    profiles:
      - test

# ===============================
# Networks
# ===============================
networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  test-network:
    driver: bridge

# ===============================
# Volumes
# ===============================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
  test_postgres_data:
    driver: local
  test_redis_data:
    driver: local

# ===============================
# Environment Variables Reference
# ===============================
# Copy .env.example to .env and customize:
#
# # Application
# APP_ENV=production
# LOG_LEVEL=INFO
# VERSION=1.0.0
#
# # API Keys
# BREEZE_API_KEY=your_breeze_api_key
# BREEZE_SECRET=your_breeze_secret
# ZERODHA_API_KEY=your_zerodha_api_key
# ZERODHA_SECRET=your_zerodha_secret
#
# # Database
# POSTGRES_DB=price_predictor
# POSTGRES_USER=postgres
# POSTGRES_PASSWORD=secure_password
# DATABASE_URL=postgresql://postgres:secure_password@db:5432/price_predictor
#
# # Redis
# REDIS_PASSWORD=redis_secure_password
# REDIS_URL=redis://:redis_secure_password@redis:6379/0
#
# # Ports
# APP_PORT=8000
# API_PORT=8001
# POSTGRES_PORT=5432
# REDIS_PORT=6379
# JUPYTER_PORT=8888
# PROMETHEUS_PORT=9090
# GRAFANA_PORT=3000
# NGINX_HTTP_PORT=80
# NGINX_HTTPS_PORT=443
# ELASTICSEARCH_PORT=9200
# KIBANA_PORT=5601
#
# # Monitoring
# GRAFANA_PASSWORD=secure_grafana_password
# JUPYTER_TOKEN=secure_jupyter_token
#
# # Build Info
# BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
# VCS_REF=$(git rev-parse HEAD)
