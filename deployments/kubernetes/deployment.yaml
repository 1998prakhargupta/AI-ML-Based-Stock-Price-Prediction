# Kubernetes Deployment Configuration for Price Predictor
apiVersion: v1
kind: Namespace
metadata:
  name: price-predictor
  labels:
    app: price-predictor
    environment: production

---
# ConfigMap for Application Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: price-predictor-config
  namespace: price-predictor
data:
  APP_ENV: "production"
  LOG_LEVEL: "INFO"
  PYTHONPATH: "/app"
  API_HOST: "0.0.0.0"
  API_PORT: "8000"
  REDIS_URL: "redis://redis-service:6379/0"
  DATABASE_URL: "postgresql://postgres:$(POSTGRES_PASSWORD)@postgres-service:5432/price_predictor"
  CELERY_BROKER_URL: "redis://redis-service:6379/2"
  CELERY_RESULT_BACKEND: "redis://redis-service:6379/2"

---
# Secret for Sensitive Data
apiVersion: v1
kind: Secret
metadata:
  name: price-predictor-secrets
  namespace: price-predictor
type: Opaque
stringData:
  BREEZE_API_KEY: "your-breeze-api-key"
  BREEZE_SECRET: "your-breeze-secret"
  ZERODHA_API_KEY: "your-zerodha-api-key"
  ZERODHA_SECRET: "your-zerodha-secret"
  POSTGRES_PASSWORD: "secure-postgres-password"
  REDIS_PASSWORD: "secure-redis-password"
  JWT_SECRET: "your-jwt-secret"
  SECRET_KEY: "your-app-secret-key"

---
# Persistent Volume for Data Storage
apiVersion: v1
kind: PersistentVolume
metadata:
  name: price-predictor-data-pv
  namespace: price-predictor
spec:
  capacity:
    storage: 20Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: fast-ssd
  hostPath:
    path: /var/lib/price-predictor/data

---
# Persistent Volume Claim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: price-predictor-data-pvc
  namespace: price-predictor
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: fast-ssd

---
# PostgreSQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-deployment
  namespace: price-predictor
  labels:
    app: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: "price_predictor"
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: price-predictor-secrets
              key: POSTGRES_PASSWORD
        - name: PGDATA
          value: "/var/lib/postgresql/data/pgdata"
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
            - -d
            - price_predictor
          initialDelaySeconds: 15
          periodSeconds: 5
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
            - -d
            - price_predictor
          initialDelaySeconds: 30
          periodSeconds: 10
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc

---
# PostgreSQL PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: price-predictor
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: price-predictor
  labels:
    app: postgres
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-deployment
  namespace: price-predictor
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        command:
        - redis-server
        - --appendonly
        - "yes"
        - --requirepass
        - "$(REDIS_PASSWORD)"
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: price-predictor-secrets
              key: REDIS_PASSWORD
        volumeMounts:
        - name: redis-storage
          mountPath: /data
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 10
          periodSeconds: 10
      volumes:
      - name: redis-storage
        persistentVolumeClaim:
          claimName: redis-pvc

---
# Redis PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: price-predictor
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: price-predictor
  labels:
    app: redis
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP

---
# Main Application Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: price-predictor-app
  namespace: price-predictor
  labels:
    app: price-predictor-app
spec:
  replicas: 3
  selector:
    matchLabels:
      app: price-predictor-app
  template:
    metadata:
      labels:
        app: price-predictor-app
    spec:
      containers:
      - name: price-predictor-app
        image: price-predictor:latest
        ports:
        - containerPort: 8000
        envFrom:
        - configMapRef:
            name: price-predictor-config
        - secretRef:
            name: price-predictor-secrets
        volumeMounts:
        - name: data-storage
          mountPath: /app/data
        - name: config-volume
          mountPath: /app/configs
          readOnly: true
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
      volumes:
      - name: data-storage
        persistentVolumeClaim:
          claimName: price-predictor-data-pvc
      - name: config-volume
        configMap:
          name: price-predictor-app-config

---
# Application Service
apiVersion: v1
kind: Service
metadata:
  name: price-predictor-app-service
  namespace: price-predictor
  labels:
    app: price-predictor-app
spec:
  selector:
    app: price-predictor-app
  ports:
  - port: 8000
    targetPort: 8000
  type: ClusterIP

---
# API Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: price-predictor-api
  namespace: price-predictor
  labels:
    app: price-predictor-api
spec:
  replicas: 2
  selector:
    matchLabels:
      app: price-predictor-api
  template:
    metadata:
      labels:
        app: price-predictor-api
    spec:
      containers:
      - name: price-predictor-api
        image: price-predictor-api:latest
        ports:
        - containerPort: 8001
        envFrom:
        - configMapRef:
            name: price-predictor-config
        - secretRef:
            name: price-predictor-secrets
        env:
        - name: API_PORT
          value: "8001"
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        readinessProbe:
          httpGet:
            path: /health
            port: 8001
          initialDelaySeconds: 20
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /health
            port: 8001
          initialDelaySeconds: 40
          periodSeconds: 30

---
# API Service
apiVersion: v1
kind: Service
metadata:
  name: price-predictor-api-service
  namespace: price-predictor
  labels:
    app: price-predictor-api
spec:
  selector:
    app: price-predictor-api
  ports:
  - port: 8001
    targetPort: 8001
  type: ClusterIP

---
# Celery Worker Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: celery-worker
  namespace: price-predictor
  labels:
    app: celery-worker
spec:
  replicas: 2
  selector:
    matchLabels:
      app: celery-worker
  template:
    metadata:
      labels:
        app: celery-worker
    spec:
      containers:
      - name: celery-worker
        image: price-predictor:latest
        command: ["celery", "-A", "src.tasks.celery", "worker", "--loglevel=info", "--concurrency=4"]
        envFrom:
        - configMapRef:
            name: price-predictor-config
        - secretRef:
            name: price-predictor-secrets
        volumeMounts:
        - name: data-storage
          mountPath: /app/data
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "800m"
      volumes:
      - name: data-storage
        persistentVolumeClaim:
          claimName: price-predictor-data-pvc

---
# Celery Beat Scheduler Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: celery-beat
  namespace: price-predictor
  labels:
    app: celery-beat
spec:
  replicas: 1
  selector:
    matchLabels:
      app: celery-beat
  template:
    metadata:
      labels:
        app: celery-beat
    spec:
      containers:
      - name: celery-beat
        image: price-predictor:latest
        command: ["celery", "-A", "src.tasks.celery", "beat", "--loglevel=info"]
        envFrom:
        - configMapRef:
            name: price-predictor-config
        - secretRef:
            name: price-predictor-secrets
        volumeMounts:
        - name: data-storage
          mountPath: /app/data
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "300m"
      volumes:
      - name: data-storage
        persistentVolumeClaim:
          claimName: price-predictor-data-pvc

---
# Ingress for External Access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: price-predictor-ingress
  namespace: price-predictor
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
spec:
  tls:
  - hosts:
    - app.1998prakhargupta.dev
    - api.1998prakhargupta.dev
    secretName: price-predictor-tls
  rules:
  - host: app.1998prakhargupta.dev
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: price-predictor-app-service
            port:
              number: 8000
  - host: api.1998prakhargupta.dev
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: price-predictor-api-service
            port:
              number: 8001

---
# Horizontal Pod Autoscaler for App
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: price-predictor-app-hpa
  namespace: price-predictor
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: price-predictor-app
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# Horizontal Pod Autoscaler for API
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: price-predictor-api-hpa
  namespace: price-predictor
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: price-predictor-api
  minReplicas: 2
  maxReplicas: 8
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 60

---
# Network Policy for Security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: price-predictor-network-policy
  namespace: price-predictor
spec:
  podSelector:
    matchLabels:
      app: price-predictor-app
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: nginx-ingress
    ports:
    - protocol: TCP
      port: 8000
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80

---
# Service Monitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: price-predictor-metrics
  namespace: price-predictor
  labels:
    app: price-predictor
spec:
  selector:
    matchLabels:
      app: price-predictor-app
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics

---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: price-predictor-app-pdb
  namespace: price-predictor
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: price-predictor-app

---
# Resource Quota for Namespace
apiVersion: v1
kind: ResourceQuota
metadata:
  name: price-predictor-quota
  namespace: price-predictor
spec:
  hard:
    requests.cpu: "4"
    requests.memory: 8Gi
    limits.cpu: "8"
    limits.memory: 16Gi
    persistentvolumeclaims: "10"
    pods: "20"
